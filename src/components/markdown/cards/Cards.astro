---
import {getEntry} from 'content-structure'
import CardMeta from './CardsMeta.astro'
import AstroMarkdown from '@/components/markdown/AstroMarkdown.astro'
import yaml from 'js-yaml'

export interface Props {
  code: string;
  dirpath: string;
}

const { code, dirpath } = Astro.props as Props;

const cards = yaml.load(code)

const promises = cards.map(entry => getEntry({ uid: entry.uid }));
const entries = await Promise.all(promises);
---
<div class="cards container">
    {
        entries.map((entry,index)=>(
            <div class="card" style={`width:${cards[index].width_rem}rem`}>
                {!cards[index].body&&
                    <CardMeta data={entry.data} dirpath={dirpath} />
                }
                {cards[index].body&&
                    <h1 class="title">{entry.data.title}</h1>
                    <AstroMarkdown node={entry.tree} data={entry.data} />
                }
            </div>
        ))
    }
</div>

<style>
.title{
    width:100%;
    text-align:center;
    font-size: 1.5rem;
    margin-top: 0.5rem;
    margin-bottom: 1rem;
    font-weight: 500;
}
.cards.container{
    padding-top: 1.5rem;
    display:flex;
    flex-wrap:wrap;
    gap:1.75rem;
    justify-content: center;
}
.card{
    background-color: var(--content-bg-color);
    border: 1px solid rgba(138, 115, 85, 0.15);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    border-radius: 12px;
    width:18rem;
    padding: 1.25rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}
.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(138, 115, 85, 0.3);
}
.card :global(.paragraph:has(>img)) {
    text-align: center;
}
</style>
